apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
namespace: monitoring
resources:
  - storage.yml
  - slackurl-externalsecret.yaml
  - monitoring-namespace.yaml
helmCharts:
- name: kube-prometheus-stack
  includeCRDs: false
  releaseName: monitoring
  version: 70.7.0
  repo: https://prometheus-community.github.io/helm-charts
  valuesInline:
    namespaceOverride: "monitoring"
    defaultRules:
      rules:
        kubeApiserverAvailability: true
        kubeApiserver: true
        etcd: false
    server:
    prometheusOperator:
      tlsProxy:
        enabled: false
      createCustomResource: false
    alertmanager:
      alertmanagerSpec:
        secrets:
          - slackurl
      config:
        global:
          resolve_timeout: 5m
          slack_api_url_file: /etc/alertmanager/secrets/slackurl/slackurl
        route:
          receiver: 'slack'
          group_by: ["alertname", "job"]
        receivers:
        - name: 'slack'
          slack_configs:
          - send_resolved: true
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }} for {{ .CommonLabels.job }}
              {{- if gt (len .CommonLabels) (len .GroupLabels) -}}
              {{" "}}(
              {{- with .CommonLabels.Remove .GroupLabels.Names }}
                {{- range $index, $label := .SortedPairs -}}
                  {{ if $index }}, {{ end }}
                  {{- $label.Name }}="{{ $label.Value -}}"
                {{- end }}
              {{- end -}}
              )
              {{- end }}
            text: >-
              {{ range .Alerts -}}
              *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

              *Description:* {{ .Annotations.description }}

              *Details:*
              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
              {{ end }}
              {{ end }}
        - name: 'null'
      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
        - "alertmanager.apps.igou.systems"
        tls:
        - hosts:
          - "alertmanager.apps.igou.systems"
    nodeExporter:
      serviceMonitor:
        relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
    grafana:
      env:
        DS_PROMETHEUS: "prometheus"
      deploymentStrategy:
        type: Recreate
      persistence:
        enabled: false
      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
        - "grafana.apps.igou.systems"
        tls:
        - hosts:
          - "grafana.apps.igou.systems"
      sidecar:
        datasources:
          enabled: true
          defaultDatasourceEnabled: true
        dashboards:
          enabled: true
          searchNamespace: ALL
          provider:
            disableDelete: false
            allowUiUpdates: true
      plugins:
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - grafana-piechart-panel
      - vonage-status-panel
      - grafana-worldmap-panel
      - grafana-clock-panel
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
          - name: 'default'
            orgId: 1
            folder: ''
            type: file
            disableDeletion: false
            allowUiUpdates: true
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
      dashboards:
        default:
          nginx-dashboard:
            url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
            datasource: Prometheus
          mktxp-dashboard:
            gnetId: 13679
            revision: 22
            datasource:
              - name: DS_PROMETHEUS
                value: Prometheus
      grafana.ini:
        paths:
          data: /var/lib/grafana/data
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        analytics:
          check_for_updates: true
        log:
          mode: console
        grafana_net:
          url: https://grafana.net
    kubeEtcd:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubelet:
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        hosts:
        - "prometheus.apps.igou.systems"
        tls:
        - hosts:
          - "prometheus.apps.igou.systems"
      prometheusSpec:
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        scrapeConfigNamespaceSelector: {}
        scrapeConfigSelector: {}
        scrapeConfigSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 60d
        enableAdminAPI: true
        walCompression: true
        storageSpec: # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/user-guides/storage.md
          volumeClaimTemplate:
            spec:
              selector:
                matchLabels:
                  app.kubernetes.io/name: prometheus
              resources:
                requests:
                  storage: 200Gi
              storageClassName: ""
